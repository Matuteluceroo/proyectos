// üöÄ Servidor Express - Versi√≥n M√≠nima
// Este es el "cerebro" de nuestro backend

// üì¶ Importamos las librer√≠as que necesitamos
import express from 'express';
import cors from 'cors';
import path from 'path';
import cookieParser from 'cookie-parser'; // Ahora habilitado
import { 
  inicializarDB, 
  obtenerUsuarioConRol,
  obtenerTodosUsuarios,
  obtenerCategorias,
  obtenerDocumentos,
  obtenerMetricas,
  buscarContenido
} from './database-citricola.js';
import { generateAccessToken } from './middleware/jwt.js';
import archivosRoutes from './routes/archivos.js';
import documentosRoutes from './routes/documentos.js';
import usuariosRoutes from './routes/usuarios.js';
import reportesRoutes from './routes/reportes.js';
import gestionContenidoRoutes from './routes/gestionContenido.js';
import configuracionRoutes from './routes/configuracion.js';
import guiasRapidasRoutes from './routes/guiasRapidas.js';
import procedimientosRoutes from './routes/procedimientos.js';
import comentariosRoutes from './routes/comentarios.js';
import notificacionesRoutes from './routes/notificaciones.js';

// üèóÔ∏è Creamos la aplicaci√≥n Express
const app = express();

// ‚öôÔ∏è Configuraci√≥n b√°sica
const PORT = 5000; // Puerto donde va a "escuchar" nuestro servidor

// üåê Configuramos CORS para que frontend pueda conectarse
const allowedOrigins = [
    'http://localhost:3000',    // React en puerto 3000
    'http://localhost:5173',    // Vite en puerto 5173
    'http://127.0.0.1:3000',    // Alternativa localhost
    'http://127.0.0.1:5173',    // Alternativa localhost
];

// ÔøΩ Dominios de producci√≥n
if (process.env.NODE_ENV === 'production') {
    // Vercel genera URLs como: https://tu-app.vercel.app
    allowedOrigins.push(process.env.FRONTEND_URL || 'https://*.vercel.app');
    // Tambi√©n permitir subdominio personalizado si lo tienes
    if (process.env.CUSTOM_DOMAIN) {
        allowedOrigins.push(process.env.CUSTOM_DOMAIN);
    }
} else {
    // üîí Solo en desarrollo permitimos archivos locales
    allowedOrigins.push('null'); // Archivos locales HTML solo en desarrollo
}

app.use(cors({
    origin: function (origin, callback) {
        // Permitir requests sin origin (ej: aplicaciones m√≥viles, Postman)
        if (!origin) return callback(null, true);
        
        // En producci√≥n, verificar dominios de Vercel
        if (process.env.NODE_ENV === 'production') {
            // Permitir cualquier subdominio de vercel.app
            if (origin.endsWith('.vercel.app') || origin === process.env.FRONTEND_URL) {
                return callback(null, true);
            }
            // Tambi√©n permitir dominio personalizado
            if (process.env.CUSTOM_DOMAIN && origin === process.env.CUSTOM_DOMAIN) {
                return callback(null, true);
            }
        }
        
        // Verificar lista de or√≠genes permitidos (desarrollo y producci√≥n espec√≠ficos)
        if (allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            console.warn(`‚ùå CORS bloqueado para origen: ${origin}`);
            callback(new Error('No permitido por pol√≠tica CORS'));
        }
    },
    credentials: true, // Permitimos cookies
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: [
        'Content-Type', 
        'Authorization', 
        'X-Requested-With',
        'userRole',     // üîß Header personalizado para rol de usuario
        'userrole'      // üîß Alias por compatibilidad
    ]
}));

// üìù Configuramos Express para entender JSON
app.use(express.json());

// üç™ Configuramos cookies parser
app.use(cookieParser());

// üìÅ Servir archivos est√°ticos (uploads) con headers apropiados
app.use('/uploads', (req, res, next) => {
  // Configurar headers para permitir descarga
  res.set({
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET',
    'Access-Control-Allow-Headers': 'Content-Type'
  });
  next();
}, express.static(path.join(process.cwd(), 'uploads')));

// üéØ RUTAS - Aqu√≠ definimos qu√© responde el servidor

// üìÅ Rutas de archivos
app.use('/api/archivos', archivosRoutes);

// üìÑ Rutas de documentos CRUD
app.use('/api/documentos', documentosRoutes);

// üë• Rutas de usuarios CRUD (solo admin)
app.use('/api/usuarios', usuariosRoutes);

// üìä Rutas de reportes y estad√≠sticas (solo admin)
app.use('/api/reportes', reportesRoutes);

// üìö Rutas de gesti√≥n de contenido (categor√≠as y documentos)
app.use('/api/contenido', gestionContenidoRoutes);

// ‚öôÔ∏è Rutas de configuraci√≥n del sistema (solo admin)
app.use('/api/configuracion', configuracionRoutes);

// ‚ö° Rutas de gu√≠as r√°pidas (operadores)
app.use('/api/guias-rapidas', guiasRapidasRoutes);

// üìã Rutas de procedimientos paso a paso (operadores)
app.use('/api/procedimientos', procedimientosRoutes);

// üí¨ Rutas de comentarios en documentos
app.use('/api/comentarios', comentariosRoutes);

//  Rutas de notificaciones push e internas
app.use('/api/notificaciones', notificacionesRoutes);

// üëã Ruta de prueba - Para verificar que funciona
app.get('/', (req, res) => {
    res.json({ 
        mensaje: '¬°Hola! El servidor est√° funcionando üéâ',
        proyecto: 'Saber Citr√≠cola',
        version: '1.0.0',
        rutas_test: {
            uploads: '/uploads',
            prueba_descarga: '/uploads/documento_prueba.txt'
        }
    });
});

// üìÑ Ruta para obtener informaci√≥n del API
app.get('/api/info', (req, res) => {
    res.json({
        mensaje: 'API de Saber Citr√≠cola',
        sistema: 'Gesti√≥n del Conocimiento Citr√≠cola',
        version: '2.0.0',
        endpoints_disponibles: [
            'GET / - Informaci√≥n b√°sica',
            'GET /api/info - Informaci√≥n del API',
            'POST /api/login - Login con roles (admin/experto/operador)',
            'GET /api/usuarios - Lista de usuarios (solo admin)',
            'GET /api/categorias - Categor√≠as de conocimiento',
            'GET /api/documentos - Documentos y contenido',
            'GET /api/metricas - Indicadores del sistema'
        ]
    });
});

// üîê Ruta para login con roles
app.post('/api/login', (req, res) => {
    const { username, password } = req.body;
    
    console.log('üîê Intento de login:', { username, password });
    
    if (!username || !password) {
        return res.status(400).json({ 
            error: 'Username y password son requeridos' 
        });
    }
    
    obtenerUsuarioConRol(username, password, (err, usuario) => {
        if (err) {
            console.error('‚ùå Error al verificar login:', err);
            res.status(500).json({ error: 'Error interno del servidor' });
        } else if (usuario) {
            console.log('‚úÖ Usuario encontrado:', usuario);
            
            // üîë Generar token JWT
            const token = generateAccessToken({
                id: usuario.id,
                username: usuario.username,
                email: usuario.email,
                rol: usuario.rol
            });
            
            // üç™ Configurar cookie httpOnly segura
            res.cookie('token', token, {
                httpOnly: true,     // Solo accesible desde servidor (no JavaScript)
                secure: process.env.NODE_ENV === 'production', // HTTPS en producci√≥n
                sameSite: 'strict', // Protecci√≥n CSRF
                maxAge: 5 * 60 * 60 * 1000 // 5 horas
            });
            
            res.json({
                mensaje: 'Login exitoso',
                usuario: {
                    id: usuario.id,
                    username: usuario.username,
                    email: usuario.email,
                    nombre_completo: usuario.nombre_completo,
                    rol: usuario.rol
                },
                // üìù Tambi√©n enviamos el token para compatibilidad con localStorage
                token: token
            });
        } else {
            console.log('‚ùå Usuario no encontrado con credenciales:', { username, password });
            res.status(401).json({ 
                error: 'Credenciales incorrectas' 
            });
        }
    });
});

// üö™ Ruta para logout seguro
app.post('/api/logout', (req, res) => {
    // üç™ Limpiar cookie del token
    res.clearCookie('token', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict'
    });
    
    res.json({
        mensaje: 'Logout exitoso',
        success: true
    });
});

// üìö Ruta para obtener categor√≠as
app.get('/api/categorias', (req, res) => {
    obtenerCategorias((err, categorias) => {
        if (err) {
            console.error('‚ùå Error al obtener categor√≠as:', err);
            res.status(500).json({ 
                success: false,
                error: 'Error interno del servidor' 
            });
        } else {
            res.json({
                success: true,
                mensaje: 'Lista de categor√≠as',
                data: categorias
            });
        }
    });
});

// üìÑ Ruta para obtener documentos (legacy - ser√° reemplazada por CRUD)
app.get('/api/documentos-legacy', (req, res) => {
    const { categoria, rol = 'operador' } = req.query;
    
    obtenerDocumentos(categoria, rol, (err, documentos) => {
        if (err) {
            console.error('‚ùå Error al obtener documentos:', err);
            res.status(500).json({ error: 'Error interno del servidor' });
        } else {
            res.json({
                mensaje: 'Lista de documentos',
                documentos: documentos
            });
        }
    });
});

// üìä Ruta para obtener m√©tricas
app.get('/api/metricas', (req, res) => {
    obtenerMetricas((err, metricas) => {
        if (err) {
            console.error('‚ùå Error al obtener m√©tricas:', err);
            res.status(500).json({ error: 'Error interno del servidor' });
        } else {
            res.json({
                mensaje: 'M√©tricas del sistema',
                metricas: metricas
            });
        }
    });
});

// üîç Ruta para b√∫squeda inteligente
app.get('/api/buscar', (req, res) => {
    const { q, tipo = 'todos', categoria, fechaDesde, fechaHasta } = req.query;
    
    if (!q || q.trim().length < 2) {
        return res.status(400).json({ 
            error: 'La consulta debe tener al menos 2 caracteres' 
        });
    }
    
    buscarContenido(q.trim(), { tipo, categoria, fechaDesde, fechaHasta }, (err, resultados) => {
        if (err) {
            console.error('‚ùå Error en b√∫squeda:', err);
            res.status(500).json({ error: 'Error interno del servidor' });
        } else {
            res.json({
                mensaje: 'Resultados de b√∫squeda',
                query: q.trim(),
                total: resultados.length,
                resultados: resultados
            });
        }
    });
});

// üöÄ Iniciamos el servidor
app.listen(PORT, async () => {
    console.log(`
üçä ===================================
üöÄ Servidor Saber Citr√≠cola iniciado
üìç URL: http://localhost:${PORT}
üåê CORS permitido desde: http://localhost:3000
‚è∞ Hora: ${new Date().toLocaleString()}
üçä ===================================
    `);
    
    // üóÑÔ∏è Inicializamos la base de datos
    console.log('üóÑÔ∏è Inicializando base de datos...');
    await inicializarDB();
    
    console.log('‚úÖ Backend iniciado correctamente');
});

// üìù NOTAS PARA ENTENDER:
// 
// 1. express() ‚Üí Crea una nueva aplicaci√≥n web
// 2. app.use() ‚Üí Configura middleware (funciones que se ejecutan en cada petici√≥n)
// 3. app.get() ‚Üí Define qu√© hacer cuando alguien hace una petici√≥n GET
// 4. req ‚Üí La petici√≥n que llega (request)
// 5. res ‚Üí La respuesta que enviamos (response)
// 6. app.listen() ‚Üí Inicia el servidor en el puerto especificado