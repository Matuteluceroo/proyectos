// ‚ö° guiasRapidas.js - Controlador para gu√≠as r√°pidas
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Datos de ejemplo para gu√≠as r√°pidas
const guiasRapidasData = [
    {
        id: 1,
        titulo: 'Identificaci√≥n R√°pida de Plagas',
        descripcion: 'Gu√≠a visual para identificar las plagas m√°s comunes en c√≠tricos',
        categoria: 'plagas',
        icono: 'üêõ',
        prioridad: 'alta',
        tiempoLectura: 3,
        vistas: 245,
        fechaCreacion: '2024-01-15',
        fechaActualizacion: '2024-01-20',
        contenido: [
            {
                titulo: 'Signos Visuales Principales',
                texto: 'Los primeros signos de infestaci√≥n incluyen hojas amarillentas, manchas oscuras o deformaciones en las hojas. Tambi√©n busca presencia de insectos o sus larvas.'
            },
            {
                titulo: '√Åreas Cr√≠ticas a Revisar',
                texto: 'Concentra tu inspecci√≥n en las siguientes √°reas del √°rbol:',
                lista: [
                    'Env√©s de las hojas (parte inferior)',
                    'Brotes nuevos y hojas j√≥venes',
                    'Uniones entre ramas y tronco',
                    'Base del tronco y ra√≠ces superficiales'
                ]
            },
            {
                titulo: 'Acciones Inmediatas',
                texto: 'Una vez detectada la plaga, ejecuta estas acciones prioritarias:',
                lista: [
                    'Fotografiar las √°reas afectadas para documentaci√≥n',
                    'Medir la extensi√≥n del da√±o (porcentaje de hojas afectadas)',
                    'Verificar plantas cercanas para detectar propagaci√≥n',
                    'Aislar la planta si es posible para evitar contagio'
                ]
            }
        ],
        notasImportantes: [
            'Act√∫a r√°pidamente para prevenir propagaci√≥n a otras plantas',
            'Consulta con experto si no est√°s seguro del tipo de plaga',
            'Documenta siempre con fotos para seguimiento posterior'
        ],
        recursosRelacionados: [
            'Manual de Tratamiento de Plagas',
            'Contactos de Especialistas en Sanidad Vegetal',
            'Procedimiento de Aplicaci√≥n de Pesticidas'
        ]
    },
    {
        id: 2,
        titulo: 'Calibraci√≥n de pH del Suelo',
        descripcion: 'Pasos r√°pidos para medir y ajustar el pH del suelo de manera precisa',
        categoria: 'cultivo',
        icono: 'üå±',
        prioridad: 'media',
        tiempoLectura: 5,
        vistas: 189,
        fechaCreacion: '2024-01-10',
        fechaActualizacion: '2024-01-18',
        contenido: [
            {
                titulo: 'Herramientas Necesarias',
                texto: 'Para una medici√≥n precisa del pH necesitar√°s:',
                lista: [
                    'Medidor de pH digital calibrado',
                    'Agua destilada para limpieza',
                    'Recipientes para muestras de suelo',
                    'Pala peque√±a para toma de muestras'
                ]
            },
            {
                titulo: 'Proceso de Medici√≥n',
                texto: 'Sigue estos pasos para obtener mediciones confiables:',
                lista: [
                    'Toma muestras a 15cm de profundidad en 5-7 puntos diferentes',
                    'Limpia el medidor con agua destilada entre mediciones',
                    'Inserta el medidor en suelo ligeramente h√∫medo',
                    'Espera 60 segundos para lectura estable',
                    'Registra todas las mediciones para calcular promedio'
                ]
            },
            {
                titulo: 'Interpretaci√≥n de Resultados',
                texto: 'Los c√≠tricos prefieren pH entre 6.0 y 7.5. Si el pH est√° fuera de este rango, considera ajustes con cal (para subir pH) o azufre (para bajar pH).'
            }
        ],
        notasImportantes: [
            'Mide el pH cuando el suelo est√© ligeramente h√∫medo, no empapado',
            'Toma m√∫ltiples muestras para obtener un promedio representativo'
        ]
    },
    {
        id: 3,
        titulo: 'Dosificaci√≥n de Riego por Goteo',
        descripcion: 'C√°lculo r√°pido de cantidad de agua necesaria seg√∫n tipo de suelo y clima',
        categoria: 'riego',
        icono: 'üíß',
        prioridad: 'alta',
        tiempoLectura: 4,
        vistas: 312,
        fechaCreacion: '2024-01-08',
        fechaActualizacion: '2024-01-22',
        contenido: [
            {
                titulo: 'Factores a Considerar',
                texto: 'La dosificaci√≥n depende de varios factores:',
                lista: [
                    'Tipo de suelo (arcilloso, franco, arenoso)',
                    'Edad y tama√±o del √°rbol',
                    '√âpoca del a√±o y temperatura',
                    'Precipitaciones recientes'
                ]
            },
            {
                titulo: 'C√°lculo B√°sico',
                texto: 'Para √°rboles adultos: 40-60 litros por √°rbol por d√≠a en verano, 20-30 litros en invierno. Ajusta seg√∫n el tama√±o del √°rbol y condiciones clim√°ticas.'
            }
        ]
    },
    {
        id: 4,
        titulo: 'Reconocimiento de Deficiencias Nutricionales',
        descripcion: 'Identificaci√≥n visual de carencias de nutrientes en hojas y frutos',
        categoria: 'fertilizacion',
        icono: 'üåø',
        prioridad: 'media',
        tiempoLectura: 6,
        vistas: 156,
        fechaCreacion: '2024-01-12',
        contenido: [
            {
                titulo: 'Deficiencia de Nitr√≥geno',
                texto: 'Hojas amarillas comenzando por las m√°s viejas, crecimiento lento, frutos peque√±os.'
            },
            {
                titulo: 'Deficiencia de Hierro',
                texto: 'Clorosis en hojas j√≥venes, nervaduras verdes con tejido amarillo entre ellas.'
            }
        ]
    }
];

const categoriasData = [
    { id: 'cultivo', nombre: 'Cultivo', descripcion: 'T√©cnicas de cultivo y manejo agron√≥mico' },
    { id: 'plagas', nombre: 'Plagas', descripcion: 'Control y manejo integrado de plagas' },
    { id: 'riego', nombre: 'Riego', descripcion: 'Sistemas y t√©cnicas de riego' },
    { id: 'fertilizacion', nombre: 'Fertilizaci√≥n', descripcion: 'Nutrici√≥n y fertilizaci√≥n de plantas' },
    { id: 'cosecha', nombre: 'Cosecha', descripcion: 'T√©cnicas y timing de cosecha' },
    { id: 'poda', nombre: 'Poda', descripcion: 'T√©cnicas de poda y formaci√≥n' },
    { id: 'postcosecha', nombre: 'Postcosecha', descripcion: 'Manejo posterior a la cosecha' }
];

// ‚ö° Obtener todas las gu√≠as r√°pidas
export const obtenerGuiasRapidas = async (req, res) => {
    try {
        console.log('‚ö° Obteniendo gu√≠as r√°pidas...');
        
        // Simular incremento de vistas
        const guiasConVistas = guiasRapidasData.map(guia => ({
            ...guia,
            vistas: guia.vistas + Math.floor(Math.random() * 5)
        }));
        
        res.json({
            success: true,
            mensaje: 'Gu√≠as r√°pidas obtenidas exitosamente',
            guias: guiasConVistas,
            total: guiasConVistas.length
        });
        
    } catch (error) {
        console.error('‚ùå Error al obtener gu√≠as r√°pidas:', error);
        res.status(500).json({
            success: false,
            error: 'Error al obtener gu√≠as r√°pidas',
            mensaje: error.message
        });
    }
};

// üîç Buscar gu√≠as r√°pidas
export const buscarGuiasRapidas = async (req, res) => {
    try {
        const { busqueda, categoria } = req.query;
        console.log('üîç Buscando gu√≠as r√°pidas:', { busqueda, categoria });
        
        let guiasFiltradas = [...guiasRapidasData];
        
        // Filtrar por b√∫squeda de texto
        if (busqueda && busqueda.trim()) {
            const termino = busqueda.toLowerCase().trim();
            guiasFiltradas = guiasFiltradas.filter(guia =>
                guia.titulo.toLowerCase().includes(termino) ||
                guia.descripcion.toLowerCase().includes(termino) ||
                guia.contenido?.some(seccion => 
                    seccion.titulo.toLowerCase().includes(termino) ||
                    seccion.texto.toLowerCase().includes(termino)
                )
            );
        }
        
        // Filtrar por categor√≠a
        if (categoria && categoria.trim()) {
            guiasFiltradas = guiasFiltradas.filter(guia => 
                guia.categoria === categoria.trim()
            );
        }
        
        res.json({
            success: true,
            mensaje: 'B√∫squeda completada',
            guias: guiasFiltradas,
            total: guiasFiltradas.length,
            filtros: { busqueda, categoria }
        });
        
    } catch (error) {
        console.error('‚ùå Error en b√∫squeda de gu√≠as:', error);
        res.status(500).json({
            success: false,
            error: 'Error en la b√∫squeda',
            mensaje: error.message
        });
    }
};

// üìÇ Obtener categor√≠as de gu√≠as
export const obtenerCategoriasGuias = async (req, res) => {
    try {
        console.log('üìÇ Obteniendo categor√≠as de gu√≠as...');
        
        // Agregar conteo de gu√≠as por categor√≠a
        const categoriasConConteo = categoriasData.map(categoria => {
            const conteoGuias = guiasRapidasData.filter(guia => guia.categoria === categoria.id).length;
            return {
                ...categoria,
                totalGuias: conteoGuias
            };
        });
        
        res.json({
            success: true,
            mensaje: 'Categor√≠as obtenidas exitosamente',
            categorias: categoriasConConteo
        });
        
    } catch (error) {
        console.error('‚ùå Error al obtener categor√≠as:', error);
        res.status(500).json({
            success: false,
            error: 'Error al obtener categor√≠as',
            mensaje: error.message
        });
    }
};

// üëÅÔ∏è Marcar gu√≠a como consultada
export const marcarGuiaComoConsultada = async (req, res) => {
    try {
        const { id } = req.params;
        const usuario = req.headers['x-user-name'] || 'Usuario an√≥nimo';
        
        console.log(`üëÅÔ∏è Marcando gu√≠a ${id} como consultada por ${usuario}`);
        
        // Encontrar la gu√≠a
        const guiaIndex = guiasRapidasData.findIndex(guia => guia.id == id);
        
        if (guiaIndex === -1) {
            return res.status(404).json({
                success: false,
                error: 'Gu√≠a no encontrada'
            });
        }
        
        // Incrementar vistas
        guiasRapidasData[guiaIndex].vistas += 1;
        
        res.json({
            success: true,
            mensaje: 'Gu√≠a marcada como consultada',
            nuevasVistas: guiasRapidasData[guiaIndex].vistas
        });
        
    } catch (error) {
        console.error('‚ùå Error al marcar gu√≠a como consultada:', error);
        res.status(500).json({
            success: false,
            error: 'Error al marcar gu√≠a como consultada',
            mensaje: error.message
        });
    }
};

// ‚≠ê Marcar gu√≠a como favorita
export const marcarGuiaComoFavorita = async (req, res) => {
    try {
        const { id } = req.params;
        const usuario = req.headers['x-user-name'] || 'Usuario an√≥nimo';
        
        console.log(`‚≠ê Marcando gu√≠a ${id} como favorita para ${usuario}`);
        
        // En una implementaci√≥n real, esto se guardar√≠a en base de datos
        // Por ahora solo confirmamos la acci√≥n
        
        res.json({
            success: true,
            mensaje: 'Gu√≠a marcada como favorita',
            usuario: usuario
        });
        
    } catch (error) {
        console.error('‚ùå Error al marcar gu√≠a como favorita:', error);
        res.status(500).json({
            success: false,
            error: 'Error al marcar gu√≠a como favorita',
            mensaje: error.message
        });
    }
};

// üìä Obtener estad√≠sticas de gu√≠as
export const obtenerEstadisticasGuias = async (req, res) => {
    try {
        console.log('üìä Obteniendo estad√≠sticas de gu√≠as...');
        
        // Calcular estad√≠sticas
        const totalGuias = guiasRapidasData.length;
        const totalVistas = guiasRapidasData.reduce((sum, guia) => sum + guia.vistas, 0);
        
        // Gu√≠as m√°s consultadas
        const masConsultadas = guiasRapidasData
            .sort((a, b) => b.vistas - a.vistas)
            .slice(0, 5)
            .map(guia => ({
                titulo: guia.titulo,
                vistas: guia.vistas,
                categoria: guia.categoria
            }));
        
        // Categor√≠a m√°s popular
        const vistasPorCategoria = {};
        guiasRapidasData.forEach(guia => {
            vistasPorCategoria[guia.categoria] = (vistasPorCategoria[guia.categoria] || 0) + guia.vistas;
        });
        
        const categoriaPopular = Object.keys(vistasPorCategoria).reduce((a, b) => 
            vistasPorCategoria[a] > vistasPorCategoria[b] ? a : b
        );
        
        const estadisticas = {
            totalGuias,
            totalVistas,
            masConsultadas,
            categoriaPopular,
            vistasPorCategoria,
            promedioVistas: Math.round(totalVistas / totalGuias)
        };
        
        res.json({
            success: true,
            mensaje: 'Estad√≠sticas obtenidas exitosamente',
            estadisticas
        });
        
    } catch (error) {
        console.error('‚ùå Error al obtener estad√≠sticas:', error);
        res.status(500).json({
            success: false,
            error: 'Error al obtener estad√≠sticas',
            mensaje: error.message
        });
    }
};

// üìã Obtener gu√≠a espec√≠fica por ID
export const obtenerGuiaPorId = async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìã Obteniendo gu√≠a con ID: ${id}`);
        
        const guia = guiasRapidasData.find(g => g.id == id);
        
        if (!guia) {
            return res.status(404).json({
                success: false,
                error: 'Gu√≠a no encontrada'
            });
        }
        
        res.json({
            success: true,
            mensaje: 'Gu√≠a obtenida exitosamente',
            guia
        });
        
    } catch (error) {
        console.error('‚ùå Error al obtener gu√≠a por ID:', error);
        res.status(500).json({
            success: false,
            error: 'Error al obtener gu√≠a',
            mensaje: error.message
        });
    }
};